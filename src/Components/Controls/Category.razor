@using Conesoft.Plugin.AdminPage.Features.ServiceRestarter.Services
@using Conesoft.Plugin.AdminPage.Features.ServiceWatcher.State

@inject IJSRuntime JsRuntime
@inject ServiceRestarter restarter

@if (Entries.Length > 0)
{
    <section title="@Name">
        <ul class="with-icon">
            @foreach (var entry in Entries.OrderBy(e => e.Name))
            {
                <li class=@(entry.Process != null ? "service running" : "service stopped")>
                    <img class="icon" src="/icons/services/@(entry.Category.ToLower()[..^1]).svg" />
                    <section>
                        @if (entry.Port is int)
                        {
                            <a href="https://@entry.Name" target="_blank">@entry.Name</a>
                        }
                        else if (entry.Process is int)
                        {
                            <p>@entry.Name</p>
                        }
                        else
                        {
                            <s>@entry.Name</s>
                        }
                        <ul class="tags">
                            @if (entry.Port != null)
                            {
                                <li>//:@entry.Port</li>
                            }
                            @if (entry.Process != null)
                            {
                                <li>pid @($"{entry.Process:00000}")</li>
                            }
                        </ul>
                    </section>
                    <menu>
                        <AuthorizeView Roles="Admin, Editor">
                            <Authorized>
                                @if (entry.Process != null)
                                {
                                    <li risky>
                                        <a title="restart service" @onclick="@(() => RestartService(entry.Name))" @onclick:preventDefault=true @onclick:stopPropagation=true>↺</a>
                                    </li>
                                    <AuthorizeView Roles="Admin" Context="_">
                                        <Authorized>
                                            <li dangerous>
                                                <a title="stop service" @onclick="@(() => StopService(entry.Name))" @onclick:preventDefault=true @onclick:stopPropagation=true>✕</a>
                                            </li>
                                        </Authorized>
                                    </AuthorizeView>
                                }
                                else
                                {
                                    <li>
                                        <a title="start service" @onclick="@(() => StartService(entry.Name))" @onclick:preventDefault=true @onclick:stopPropagation=true>▶</a>
                                    </li>
                                }
                            </Authorized>
                        </AuthorizeView>
                    </menu>
                </li>
            }
        </ul>
    </section>
}

@code {
    [Parameter]
    public string Name { get; set; } = default!;

    [Parameter]
    public Service[] Entries { get; set; } = [];

    async Task RestartService(string name)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure?\nrestart {Name.ToLower()[..^1]} {name}");
        if (confirmed)
        {
            await restarter.RestartService(name, category: Name);
        }
    }

    async Task StopService(string name)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure?\nstop {Name.ToLower()[..^1]} {name}");
        if (confirmed)
        {
            await restarter.StopService(name, category: Name);
        }
    }

    async Task StartService(string name)
    {
        await restarter.RestartService(name, category: Name);
    }
}
